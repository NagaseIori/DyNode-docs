import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,o as a}from"./app-BZaB11-4.js";const n={};function l(h,i){return a(),t("div",null,i[0]||(i[0]=[s(`<h1 id="advanced-features" tabindex="-1"><a class="header-anchor" href="#advanced-features"><span>Advanced Features</span></a></h1><p>This page explains the advanced editing features included in DyNode.</p><h2 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions"><span>Expressions</span></a></h2><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This is a very early <strong>experimental</strong> feature, which may <strong>frequently change</strong> in the next few versions, and it is recommended to <strong>backup</strong> your project before using it.</p></div><p>Use <kbd>0</kbd> to enter expressions.</p><p>A valid expression is a meaningful sequence of operators, numbers, and variables, such as <code>a=10+b*c</code>, <code>100&gt;90</code>, etc.</p><p>Expressions support basic arithmetic operators <code>+,-,*,/,%</code>, bitwise operators <code>&lt;&lt;,&gt;&gt;,|,&amp;</code>, logical operators <code>&amp;&amp;,||,!</code>, relational operators <code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code>, assignment <code>=</code>, etc.</p><p>You can intuitively write expressions in a syntax similar to C language. Here are some examples of valid expressions:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // a=900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // b=900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           // b=(a=20), right associative</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // c=(10*20)/20, left associative</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Expressions can be used to batch modify properties of all/selected notes.</p><p>The current supported property variables are as follows:</p><table><thead><tr><th style="text-align:center;">Property</th><th style="text-align:center;">Function</th><th style="text-align:center;">Unit</th><th style="text-align:center;">Note Limit</th></tr></thead><tbody><tr><td style="text-align:center;">time</td><td style="text-align:center;">Time of the note</td><td style="text-align:center;">ms</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">pos</td><td style="text-align:center;">Position of the note</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">wid</td><td style="text-align:center;">Width of the note</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">len</td><td style="text-align:center;">Duration of the note</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">Time of note&#39;s head</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">Time of note&#39;s tail</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr></tbody></table><p>The calculation of expressions for each note is independent. The process of expression calculation can be summarized as follows:</p><ul><li>Initialize the variables of the expression based on the properties of the note.</li><li>Calculate the expression, changing the variables in the process.</li><li>Read the variables of the expression and modify the properties of the note based on the changes.</li></ul><p>In DyNode, input expressions are separated by <code>;</code> and are executed in order. The storage type for variables is double-precision floating-point numbers.</p><p>Specifically, some variables have note limits, meaning they only take effect on certain types of notes. All calculations of expressions ignore SUB-type notes (HOLD tail notes), see <a href="#modification-of-hold-properties">Modification of HOLD Properties</a>.</p><p>Here are some valid examples of expressions, where one line represents an example:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wid</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wid</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   // Double the width of the note</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     // Set the position of all notes to 2.5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // Add 10ms to the time of notes (add note delay)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               // Symmetry of notes across the centerline of the screen (screen centerline position is 2.5)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 1.5x speed for the chart (divide all note times by 1.5, all HOLD durations by 1.5)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                 // Define variable a, and assign a to time</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modification-of-hold-properties" tabindex="-1"><a class="header-anchor" href="#modification-of-hold-properties"><span>Modification of HOLD Properties</span></a></h3><p>All calculations of expressions ignore SUB-type notes. Instead, there are some special property variables for HOLD-type notes.</p><table><thead><tr><th style="text-align:center;">Property</th><th style="text-align:center;">Function</th><th style="text-align:center;">Unit</th></tr></thead><tbody><tr><td style="text-align:center;">len</td><td style="text-align:center;">Duration of the note</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">Time of note&#39;s head</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">Time of note&#39;s tail</td><td style="text-align:center;">ms</td></tr></tbody></table><p>This means that when you modify the <code>time</code> property of a HOLD, it actually does not change the duration of the HOLD. In other words, modifying <code>time</code> means moving the HOLD as a whole rather than modifying the head and tail separately.</p><p>If you want to modify the head and tail separately, you need to modify the <code>htime</code> and <code>etime</code> properties, not the <code>time</code> property.</p><p>You may notice that these three properties can conflict. For example, if you modify <code>htime</code> and <code>etime</code>, then <code>len</code> should theoretically change as well, but variables are not bound during expression calculation.</p><p>In practice, we do not recommend having two variables related to HOLD properties in the same expression. DyNode handles conflicts of HOLD property-related variables as follows:</p><ul><li>If <code>time</code> and <code>htime</code> properties are modified simultaneously, the modification of <code>htime</code> will override the modification of <code>time</code>.</li><li>If <code>len</code> and <code>etime</code> properties are modified simultaneously, the modification of <code>len</code> will override the modification of <code>etime</code>.</li></ul><p>Here are some valid examples of expressions for modifying HOLD properties:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;etime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">etime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // Add 10ms to the head and subtract 10ms from the tail of all HOLD notes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                           // Halve the duration of all HOLDs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                           // Modify the head time of all HOLD notes to 100</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   // Equivalent to time=100;len=100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const o=e(n,[["render",l],["__file","advanced-edit.html.vue"]]),p=JSON.parse('{"path":"/en/guide/advanced-edit.html","title":"Advanced Features","lang":"en-US","frontmatter":{"description":"Advanced Features This page explains the advanced editing features included in DyNode. Expressions Warning This is a very early experimental feature, which may frequently change...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://dyn.iorinn.moe/guide/advanced-edit.html"}],["meta",{"property":"og:url","content":"https://dyn.iorinn.moe/en/guide/advanced-edit.html"}],["meta",{"property":"og:site_name","content":"DyNode"}],["meta",{"property":"og:title","content":"Advanced Features"}],["meta",{"property":"og:description","content":"Advanced Features This page explains the advanced editing features included in DyNode. Expressions Warning This is a very early experimental feature, which may frequently change..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-26T07:15:34.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-26T07:15:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced Features\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-26T07:15:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Expressions","slug":"expressions","link":"#expressions","children":[{"level":3,"title":"Modification of HOLD Properties","slug":"modification-of-hold-properties","link":"#modification-of-hold-properties","children":[]}]}],"git":{"createdTime":1706253334000,"updatedTime":1706253334000,"contributors":[{"name":"Rin","email":"31349569+NagaseIori@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.31,"words":692},"filePathRelative":"en/guide/advanced-edit.md","localizedDate":"January 26, 2024","autoDesc":true}');export{o as comp,p as data};
