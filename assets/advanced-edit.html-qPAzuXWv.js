import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as n,e as s}from"./app-YakCnxUr.js";const a={},o=s(`<h1 id="advanced-features" tabindex="-1"><a class="header-anchor" href="#advanced-features" aria-hidden="true">#</a> Advanced Features</h1><p>This page explains the advanced editing features included in DyNode.</p><h2 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions" aria-hidden="true">#</a> Expressions</h2><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This is a very early <strong>experimental</strong> feature, which may <strong>frequently change</strong> in the next few versions, and it is recommended to <strong>backup</strong> your project before using it.</p></div><p>Use <kbd>0</kbd> to enter expressions.</p><p>A valid expression is a meaningful sequence of operators, numbers, and variables, such as <code>a=10+b*c</code>, <code>100&gt;90</code>, etc.</p><p>Expressions support basic arithmetic operators <code>+,-,*,/,%</code>, bitwise operators <code>&lt;&lt;,&gt;&gt;,|,&amp;</code>, logical operators <code>&amp;&amp;,||,!</code>, relational operators <code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code>, assignment <code>=</code>, etc.</p><p>You can intuitively write expressions in a syntax similar to C language. Here are some examples of valid expressions:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span>     <span class="token comment">// a=900</span>
b<span class="token operator">=</span>a              <span class="token comment">// b=900</span>
b<span class="token operator">=</span>a<span class="token operator">=</span><span class="token number">20</span>           <span class="token comment">// b=(a=20), right associative</span>
c<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">20</span>       <span class="token comment">// c=(10*20)/20, left associative</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Expressions can be used to batch modify properties of all/selected notes.</p><p>The current supported property variables are as follows:</p><table><thead><tr><th style="text-align:center;">Property</th><th style="text-align:center;">Function</th><th style="text-align:center;">Unit</th><th style="text-align:center;">Note Limit</th></tr></thead><tbody><tr><td style="text-align:center;">time</td><td style="text-align:center;">Time of the note</td><td style="text-align:center;">ms</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">pos</td><td style="text-align:center;">Position of the note</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">wid</td><td style="text-align:center;">Width of the note</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">len</td><td style="text-align:center;">Duration of the note</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">Time of note&#39;s head</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">Time of note&#39;s tail</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr></tbody></table><p>The calculation of expressions for each note is independent. The process of expression calculation can be summarized as follows:</p><ul><li>Initialize the variables of the expression based on the properties of the note.</li><li>Calculate the expression, changing the variables in the process.</li><li>Read the variables of the expression and modify the properties of the note based on the changes.</li></ul><p>In DyNode, input expressions are separated by <code>;</code> and are executed in order. The storage type for variables is double-precision floating-point numbers.</p><p>Specifically, some variables have note limits, meaning they only take effect on certain types of notes. All calculations of expressions ignore SUB-type notes (HOLD tail notes), see <a href="#modification-of-hold-properties">Modification of HOLD Properties</a>.</p><p>Here are some valid examples of expressions, where one line represents an example:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>wid<span class="token operator">=</span>wid<span class="token operator">*</span><span class="token number">2</span>                   <span class="token comment">// Double the width of the note</span>
pos<span class="token operator">=</span><span class="token number">2.5</span>                     <span class="token comment">// Set the position of all notes to 2.5</span>
time<span class="token operator">=</span>time<span class="token operator">+</span><span class="token number">10</span>                <span class="token comment">// Add 10ms to the time of notes (add note delay)</span>

pos<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2.5</span><span class="token operator">-</span>pos               <span class="token comment">// Symmetry of notes across the centerline of the screen (screen centerline position is 2.5)</span>
time<span class="token operator">=</span>time<span class="token operator">/</span><span class="token number">1.5</span><span class="token punctuation">;</span>len<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">1.5</span>   <span class="token comment">// 1.5x speed for the chart (divide all note times by 1.5, all HOLD durations by 1.5)</span>
a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>time<span class="token operator">=</span>a                 <span class="token comment">// Define variable a, and assign a to time</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modification-of-hold-properties" tabindex="-1"><a class="header-anchor" href="#modification-of-hold-properties" aria-hidden="true">#</a> Modification of HOLD Properties</h3><p>All calculations of expressions ignore SUB-type notes. Instead, there are some special property variables for HOLD-type notes.</p><table><thead><tr><th style="text-align:center;">Property</th><th style="text-align:center;">Function</th><th style="text-align:center;">Unit</th></tr></thead><tbody><tr><td style="text-align:center;">len</td><td style="text-align:center;">Duration of the note</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">Time of note&#39;s head</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">Time of note&#39;s tail</td><td style="text-align:center;">ms</td></tr></tbody></table><p>This means that when you modify the <code>time</code> property of a HOLD, it actually does not change the duration of the HOLD. In other words, modifying <code>time</code> means moving the HOLD as a whole rather than modifying the head and tail separately.</p><p>If you want to modify the head and tail separately, you need to modify the <code>htime</code> and <code>etime</code> properties, not the <code>time</code> property.</p><p>You may notice that these three properties can conflict. For example, if you modify <code>htime</code> and <code>etime</code>, then <code>len</code> should theoretically change as well, but variables are not bound during expression calculation.</p><p>In practice, we do not recommend having two variables related to HOLD properties in the same expression. DyNode handles conflicts of HOLD property-related variables as follows:</p><ul><li>If <code>time</code> and <code>htime</code> properties are modified simultaneously, the modification of <code>htime</code> will override the modification of <code>time</code>.</li><li>If <code>len</code> and <code>etime</code> properties are modified simultaneously, the modification of <code>len</code> will override the modification of <code>etime</code>.</li></ul><p>Here are some valid examples of expressions for modifying HOLD properties:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>htime<span class="token operator">=</span>htime<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>etime<span class="token operator">=</span>etime<span class="token operator">-</span><span class="token number">10</span>       <span class="token comment">// Add 10ms to the head and subtract 10ms from the tail of all HOLD notes</span>
len<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span>                           <span class="token comment">// Halve the duration of all HOLDs</span>
htime<span class="token operator">=</span><span class="token number">100</span>                           <span class="token comment">// Modify the head time of all HOLD notes to 100</span>
htime<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>len<span class="token operator">=</span><span class="token number">100</span>                   <span class="token comment">// Equivalent to time=100;len=100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),i=[o];function r(l,p){return t(),n("div",null,i)}const m=e(a,[["render",r],["__file","advanced-edit.html.vue"]]);export{m as default};
