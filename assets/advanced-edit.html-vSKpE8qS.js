import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as n,e as s}from"./app-DHCevozo.js";const a={},p=s(`<h1 id="高级功能" tabindex="-1"><a class="header-anchor" href="#高级功能" aria-hidden="true">#</a> 高级功能</h1><p>本页面讲解 DyNode 包含的进阶编辑功能。</p><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这是一个十分初期的<strong>实验性</strong>的功能，其可能会在接下来几个版本中<strong>频繁发生变动</strong>，且使用前建议对项目进行必要的<strong>备份</strong>。</p></div><p>使用 <kbd>0</kbd> 来输入表达式。</p><p>一个合法的表达式是由一系列运算符、数字与变量排列组合构成的一个有意义的式子，例如：<code>a=10+b*c</code>，<code>100&gt;90</code>等。</p><p>表达式支持基本的四则运算符 <code>+,-,*,/,%</code>，位运算符 <code>&lt;&lt;,&gt;&gt;,|,&amp;</code>，逻辑运算符 <code>&amp;&amp;,||,!</code>，关系运算符 <code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code>，赋值 <code>=</code> 等。</p><p>你可以以符合直觉的方式以类似C语言的语法来撰写该表达式，一些合法的表达式例子如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span>     <span class="token comment">// a=900</span>
b<span class="token operator">=</span>a              <span class="token comment">// b=900</span>
b<span class="token operator">=</span>a<span class="token operator">=</span><span class="token number">20</span>           <span class="token comment">// b=(a=20)，右结合</span>
c<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">20</span>       <span class="token comment">// c=(10*20)/20，左结合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过表达式的计算来批量修改全部音符/选中音符的属性。</p><p>当前支持的属性变量见下表：</p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">作用</th><th style="text-align:center;">单位</th><th style="text-align:center;">音符限制</th></tr></thead><tbody><tr><td style="text-align:center;">time</td><td style="text-align:center;">音符所在的时间</td><td style="text-align:center;">ms</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">pos</td><td style="text-align:center;">音符所在的位置</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">wid</td><td style="text-align:center;">音符的宽度</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">len</td><td style="text-align:center;">音符的持续时间</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">音符头部的所在时间</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">音符尾部的所在时间</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr></tbody></table><p>表达式在每个音符上的计算是独立的。表达式计算的过程可以概括如下：</p><ul><li>根据音符的属性初始化表达式的变量。</li><li>计算表达式，中途表达式的变量产生变化。</li><li>读取表达式的变量，根据变量的变化修改音符的属性。</li></ul><p>在 DyNode 中，输入的表达式以 <code>;</code> 分隔，他们将依次按顺序执行。变量的存储类型为双精度浮点数。</p><p>特别的，一些变量存在音符限制，这意味着他们只在一部分音符上能够生效。所有表达式的计算都将忽略 SUB 类型的音符（HOLD 尾部音符），详见 <a href="#hold-%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BF%AE%E6%94%B9">HOLD 属性的修改</a> 。</p><p>下面是一些表达式的合法实例，其中一行代表一个例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>wid<span class="token operator">=</span>wid<span class="token operator">*</span><span class="token number">2</span>                   <span class="token comment">// 音符的宽度翻倍</span>
pos<span class="token operator">=</span><span class="token number">2.5</span>                     <span class="token comment">// 音符的位置全部设置为2.5</span>
time<span class="token operator">=</span>time<span class="token operator">+</span><span class="token number">10</span>                <span class="token comment">// 音符的所在时间+10ms（添加音符延迟）</span>

pos<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2.5</span><span class="token operator">-</span>pos               <span class="token comment">// 将音符按照屏幕的中线进行对称（屏幕中线的位置为2.5）</span>
time<span class="token operator">=</span>time<span class="token operator">/</span><span class="token number">1.5</span><span class="token punctuation">;</span>len<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">1.5</span>   <span class="token comment">// 谱面1.5倍速（所有音符的时间除以1.5，所有HOLD的长度除以1.5）</span>
a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>time<span class="token operator">=</span>a                 <span class="token comment">// 定义变量a，并将a赋值给time</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hold-属性的修改" tabindex="-1"><a class="header-anchor" href="#hold-属性的修改" aria-hidden="true">#</a> HOLD 属性的修改</h3><p>所有表达式的计算都将忽略 SUB 类型的音符，取而代之的是针对 HOLD 类型的音符存在一些特殊的属性变量。</p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">作用</th><th style="text-align:center;">单位</th></tr></thead><tbody><tr><td style="text-align:center;">len</td><td style="text-align:center;">音符的持续时间</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">音符头部的所在时间</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">音符尾部的所在时间</td><td style="text-align:center;">ms</td></tr></tbody></table><p>这意味着当你修改 HOLD 的 <code>time</code> 属性时，它实际不会修改 HOLD 的持续时间，也即修改 <code>time</code> 意味着将 HOLD 进行整体的移动而非头部与尾部分别进行修改。</p><p>如果你想实现头部与尾部分别进行修改，你需要修改 <code>htime</code> 与 <code>etime</code> 属性，而非 <code>time</code> 属性。</p><p>你可能发现这三个属性实际上会产生冲突，即若你修改了 <code>htime</code> 与 <code>etime</code>，那么 <code>len</code> 属性理论上也会发生变化，但当前在表达式的计算过程中变量不会绑定，也即一个变量不会因为另一个变量的变动而变动。</p><p>在实际的操作中，我们不推荐你在一个表达式中同时出现两个与 HOLD 属性相关的变量。以下是 DyNode 对 HOLD 属性相关变量冲突的处理方法：</p><ul><li>若 <code>time</code> 属性与 <code>htime</code> 属性同时被修改，<code>htime</code> 的修改将覆盖 <code>time</code> 的修改。</li><li>若 <code>len</code> 属性与 <code>etime</code> 属性同时被修改，<code>len</code> 的修改将覆盖 <code>etime</code> 的修改。</li></ul><p>下面是一些合法的修改 HOLD 属性的表达式例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>htime<span class="token operator">=</span>htime<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>etime<span class="token operator">=</span>etime<span class="token operator">-</span><span class="token number">10</span>       <span class="token comment">// 所有HOLD音符的头部时间+10，所有HOLD音符的尾部时间-10</span>
len<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span>                           <span class="token comment">// 所有HOLD的持续时间除以2</span>
htime<span class="token operator">=</span><span class="token number">100</span>                           <span class="token comment">// 修改所有HOLD音符的头部时间为100</span>
htime<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>len<span class="token operator">=</span><span class="token number">100</span>                   <span class="token comment">// 等价于 time=100;len=100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[p];function l(c,d){return t(),n("div",null,o)}const m=e(a,[["render",l],["__file","advanced-edit.html.vue"]]);export{m as default};
